from feeds.exceptions import (
    IllegalParameterError,
    MissingParameterError
)


def parse_notification_params(params: dict, is_global: bool=False) -> dict:
    """
    Parses and verifies all the notification params are present.
    Raises a MissingParameter error otherwise.
    Returns the params after parsing (currently does nothing, but if
    transformations are needed in the future, here's where that happens).
    """
    # * `actor` - a user or org id.
    # * `type` - one of the type keywords (see below, TBD (as of 10/8))
    # * `target` - optional, a user or org id. - always receives this notification
    # * `object` - object of the notice. For invitations, the group to be invited to.
    #   For narratives, the narrative UPA.
    # * `level` - alert, error, warning, or request.
    # * `context` - optional, context of the notification, otherwise it'll be
    #   autogenerated from the info above.

    if not isinstance(params, dict):
        raise IllegalParameterError('Expected a JSON object as an input.')
    required_list = ['verb', 'object', 'level']
    if not is_global:
        required_list = required_list + ['actor', 'target', 'source']
    missing = [r for r in required_list if r not in params]
    if missing:
        raise MissingParameterError("Missing parameter{} - {}".format(
            "s" if len(missing) > 1 else '',
            ", ".join(missing)
        ))
    return params


def parse_expire_notifications_params(params: dict, is_admin: bool=False) -> dict:
    """
    Here's the parsing rules.
    Got 3 keys - source, note_ids, external_keys
    at least one of note_ids, external_keys must exist.
    Both of those are lists of strings, if they exist.

    if external_keys exists, source must exist and be a string.
    if not is_admin, source must exist and be a string.

    The whole thing's gotta be a JSON object.
    """
    if not isinstance(params, dict):
        raise IllegalParameterError('Expected a JSON object as an input.')

    if 'source' not in params or params.get('source') is None:
        if not is_admin:
            raise MissingParameterError('Missing parameter "source"')

    if 'note_ids' not in params and 'external_keys' not in params:
        raise MissingParameterError('Missing parameter "note_ids" or "external_keys"')

    if not isinstance(params.get('note_ids', []), list):
        raise IllegalParameterError('Expected note_ids to be a list.')
    else:
        for i in params.get('note_ids', []):
            if not isinstance(i, str):
                raise IllegalParameterError('note_ids must be a list of strings')

    if not isinstance(params.get('external_keys', []), list):
        raise IllegalParameterError('Expected external_keys to be a list.')
    else:
        for i in params.get('external_keys', []):
            if not isinstance(i, str):
                raise IllegalParameterError('external_keys must be a list of strings')

    if is_admin:
        if len(params.get("external_keys", [])) and not isinstance(params.get("source"), str):
            raise MissingParameterError(
                'Parameter "source" must be present when expiring notifications by '
                'their external keys'
            )

    return params
